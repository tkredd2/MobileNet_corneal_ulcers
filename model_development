import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow.keras.layers as tfl

from tensorflow import keras
from csv import writer
from tensorflow.keras.preprocessing import image_dataset_from_directory
from tensorflow.keras.layers.experimental.preprocessing import RandomFlip, RandomRotation
from tensorflow.keras import regularizers

hyperparameters = {'batch_size':128,
                  'random_flip':'horizontal_and_vertical',
                  'random_rotation':(0.2),
                  'dropout':0.5,
                  'L2':0.3,
                  'base_LR':0.001,
                  'initial_epochs':20,
                  'fine_tune_epochs':50}

BATCH_SIZE = hyperparameters['batch_size']
IMG_SIZE = (224,224)
train_directory = 'Train set_Madurai_only/'
val_directory = 'Validation set_Coimbatore/'
train_dataset = image_dataset_from_directory(train_directory,
                                            shuffle=True,
                                            batch_size=BATCH_SIZE,
                                            image_size=IMG_SIZE)
validation_dataset = image_dataset_from_directory(val_directory,
                                                 shuffle=True,
                                                 batch_size=BATCH_SIZE,
                                                 image_size=IMG_SIZE)

AUTOTUNE = tf.data.experimental.AUTOTUNE
train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)

def data_augmenter():
    '''
    Create a sequential model composed of horizontal flips and random contrast adjustments
    '''
    
    data_augmentation = tf.keras.Sequential()
    data_augmentation.add(RandomFlip(hyperparameters['random_flip']))
    data_augmentation.add(RandomRotation(factor=hyperparameters['random_rotation']))
                          
    return data_augmentation

data_augmentation = data_augmenter()

IMG_SHAPE = IMG_SIZE + (3,)
conv_base = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                              include_top=False,
                                              weights='imagenet')

conv_base.summary()

def MobileNetUlcerModel(image_shape=IMG_SIZE, data_augmentation=data_augmenter()):
    
    # freeze the convolutional base
    conv_base.trainable = False
    
    # create the input layer
    inputs = tf.keras.Input(shape=IMG_SHAPE)
    
    # apply data augmentation to the inputs
    x = data_augmentation(inputs)
    
    # data preprocessing using the same weights as the original pre-trained model
    x = tf.keras.applications.mobilenet_v2.preprocess_input(x)
    
    # set training to False to avoid keeping track of statistics in the batch norm layer
    x = conv_base(x, training = False)
    
    # Add the new binary classification layers
    # global average pooling layer
    x = tfl.GlobalAveragePooling2D()(x)
    # include dropout for regularization effect
    x = tfl.Dropout(hyperparameters['dropout'])(x)
    
    # Add binary prediction layer
    outputs = tfl.Dense(1,activation='sigmoid',kernel_regularizer=regularizers.l2(hyperparameters['L2']))(x)
    
    model = tf.keras.Model(inputs,outputs)
    
    return model

model = MobileNetUlcerModel()

model.summary()

base_learning_rate = hyperparameters['base_LR']
model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=base_learning_rate),
                        loss='binary_crossentropy',
                        metrics=['AUC','accuracy'])

history = model.fit(train_dataset, validation_data=validation_dataset, epochs=hyperparameters['initial_epochs'])

conv_base = model.layers[4]
conv_base.summary()

conv_base.trainable = True

len(conv_base.layers)

hyperparameters['frozen_layer'] = 72
conv_base.layers[hyperparameters['frozen_layer']].name

for layer in conv_base.layers[:hyperparameters['frozen_layer']]:
    layer.trainable = False

model.compile(optimizer = tf.keras.optimizers.RMSprop(lr = 0.1 * hyperparameters['base_LR']),
              loss = 'binary_crossentropy',
              metrics = ['AUC','accuracy'])

history_tuning = model.fit(train_dataset,
                              epochs=hyperparameters['fine_tune_epochs'],
                              validation_data=validation_dataset)

model.save('MobileNet_whole_image_fine_tune')

